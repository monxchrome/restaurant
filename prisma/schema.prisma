generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  surname        String
  phone          String
  role           Role     @default(USER)
  pushToken      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ordersAsClient Order[]  @relation("ClientOrders")
  ordersAsWaiter Order[]  @relation("WaiterOrders")
  Token          Token[]
  Order          Order[]
}

enum Role {
  ADMIN
  WAITER
  USER
}

model Order {
  id              Int    @id @default(autoincrement())
  clientName      String
  clientSurname   String
  clientPhone     String
  deliveryAddress String

  clientId Int?
  client   User? @relation("ClientOrders", fields: [clientId], references: [id])

  waiterId Int?
  waiter   User? @relation("WaiterOrders", fields: [waiterId], references: [id])

  guestPushToken String?

  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User?       @relation(fields: [userId], references: [id])
  userId     Int?
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int      @default(1)
  price      Float
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime    @default(now())
  orderItems  OrderItem[]
  category    Category    @default(EXTRAS)
  visible     Boolean     @default(true)
  inStock     Boolean     @default(true)
  isSpecialOrder Boolean   @default(false)
}

enum Category {
  SALADS_AND_SNACKS
  SOUPS
  GRILL_DISHES
  MAIN_HOT_DISHES
  PIZZA_AND_PIES
  DESSERTS
  DRINKS
  EXTRAS
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

model Token {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}
